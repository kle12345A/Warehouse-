@using Warehouse.MVC.Helpers
@using WarehouseDTOs
@model Warehouse.MVC.Models.OrderVIew
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Tạo đơn hàng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Tạo đơn hàng mới</h3>
        </div>
        <div class="card-body">

            <form asp-action="Create" method="post">
                <!-- Danh sách sản phẩm trong đơn hàng -->
                <button style="margin-bottom:1%;" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal">
                    Thêm sản phẩm
                </button>
                <div class="card mb-4">
                    <div class="card-header">Danh sách sản phẩm</div>
                    <div class="d-flex justify-content mb-3">
                    </div>

                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Tên sản phẩm</th>
                                    <th>Ảnh</th>
                                    <th>Đơn giá</th>


                                    <th>Số lượng</th>
                                    <th>Thành tiền</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.CartItems ?? new List<CartItemDTO>())
                                {
                                    <tr>
                                        <td>@item.ProductName</td>
                                        <td><img src="@item.ImageUrl" alt="Alternate Text" width="60" class="img-thumbnail" /></td>

                                        <td>@String.Format("{0:N0} đ",item.Price) </td>
                                        <td>@item.Quantity</td>
                                        <td>@String.Format("{0:N0} đ", item.Price * item.Quantity)</td>
                                        <td>
                                            <a asp-controller="Order" asp-action="RemoveFromCart" asp-route-id="@item.ProductId" class="btn btn-danger btn-sm">Xóa</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="5" class="text-end"><strong>Tổng tiền:</strong></td>
                                    <td><strong>@String.Format("{0:N0} đ",Model.CartItems?.Sum(x => x.Price * x.Quantity) ?? 0)đ</strong></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <!-- Thông tin đơn hàng -->
                <div class="card mb-4">
                    <div class="card-header">Thông tin đơn hàng</div>
                    <div class="card-body">
                        <!-- Kiểu đơn hàng -->
                        <div class="mb-3">
                            <label class="form-label">Kiểu đơn hàng *</label>
                            <select class="form-select" name="OrderType" id="orderType" required>

                                <option value="2">Xuất kho</option>
                            </select>
                        </div>

                      

                        <!-- Khách hàng (hiển thị khi là đơn xuất kho) -->
                        <div class="mb-3"  >
                            <label class="form-label">Khách hàng *</label>
                            <select class="form-select" name="CustomerId" >
                                <option value="">-- Chọn khách hàng --</option>
                                @foreach (var customer in Model.CustomerDTOs)
                                {
                                    <option value="@customer.CustomerId">@customer.FullName</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Ngày đặt hàng *</label>
                            <input type="date" class="form-control" name="OrderDate" required>
                        </div>
                    </div>
                </div>



                <!-- Nút hành động -->
                <div class="d-flex justify-content-between">
                    <a asp-controller="Order" asp-action="Index" class="btn btn-outline-secondary">Hủy</a>
                    <button type="submit" class="btn btn-success">Tạo đơn hàng</button>
                </div>
            </form>
        </div>
    </div>
    <!-- Modal chọn sản phẩm -->
    <div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Chọn sản phẩm</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addProductForm" asp-action="AddProductsToSession" asp-controller="Order" method="post">
                        @Html.AntiForgeryToken()
                        <div id="productListContainer">
                            <!-- Nội dung bảng sản phẩm sẽ được tải bằng AJAX -->
                            @await Html.PartialAsync("_ProductList", Model)
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="submit" form="addProductForm" class="btn btn-success">Thêm vào đơn</button>
                    <div id="errorMessages" class="w-100 mt-2"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="~/js/create-order.js"></script>
    <script>
        $(document).ready(function () {
            attachEvents();

            $('#addProductForm').on('submit', function (e) {
                var isValid = true;
                $('.product-checkbox:checked').each(function () {
                    var $quantityInput = $(`input[name="${$(this).data('quantity-name')}"]`);
                    if (!validateQuantity($quantityInput)) {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    $('#errorMessages').html('<div class="alert alert-danger">Vui lòng kiểm tra số lượng sản phẩm!</div>');
                } else {
                    $('#errorMessages').empty();
                }
            });

            function attachEvents() {
                $('.product-quantity').on('input', function () {
                    validateQuantity($(this));
                });

                $('.product-checkbox').on('change', function () {
                    var $quantityInput = $(`input[name="${$(this).data('quantity-name')}"]`);
                    if ($(this).is(':checked')) {
                        $quantityInput.prop('disabled', false); // Kích hoạt input khi chọn checkbox
                        validateQuantity($quantityInput);
                    } else {
                        $quantityInput.prop('disabled', true); // Vô hiệu hóa khi bỏ chọn
                    }
                });
            }

            function validateQuantity($input) {
                var available = parseInt($input.data('available'));
                var entered = parseInt($input.val());
                var $errorMessages = $('#errorMessages');

                // Nếu hết hàng (available = 0), không cần validate thêm
                if (available === 0) {
                    $input.val(0); // Đảm bảo giá trị là 0
                    $errorMessages.empty();
                    return true;
                }

                if (isNaN(entered) || entered < 0) {
                    $errorMessages.html('<div class="alert alert-danger">Số lượng phải lớn hơn hoặc bằng 0</div>');
                    return false;
                } else if (entered > available) {
                    $input.val(available);
                    $errorMessages.html('<div class="alert alert-danger">Số lượng vượt quá số lượng hiện có, đã điều chỉnh về tối đa</div>');
                    return true;
                }
                $errorMessages.empty();
                return true;
            }

            window.loadProducts = function (page, pageSize) {
                $.ajax({
                    url: '@Url.Action("GetProductList", "Order")',
                    type: 'GET',
                    data: { page: page, pageSize: pageSize },
                    success: function (data) {
                        $('#productListContainer').html(data);
                        attachEvents();
                    },
                    error: function (xhr, status, error) {
                        alert('Lỗi khi tải danh sách sản phẩm: ' + error);
                    }
                });
            };
        });
    </script>
}
@section Styles {
    <link rel="stylesheet" href="~/css/order-index.css" />
}