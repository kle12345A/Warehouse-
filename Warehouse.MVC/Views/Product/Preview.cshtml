@using System.Web
@using Newtonsoft.Json
@using WarehouseDTOs
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Preview";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="card mx-auto mt-4">
        <div class="card-header">
            <h5 class="mb-0">Xem trước sản phẩm</h5>
        </div>
        <div class="card-body">
            <h2 class="h5 mb-4">Step 2/2: Vui lòng xem trước thông tin</h2>

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }
            else if (ViewBag.PreviewData != null && ((List<ProductImportWithErrorsDTO>)ViewBag.PreviewData).Count > 0)
            {
                // Kiểm tra xem có lỗi nào không
                bool hasErrors = ((List<ProductImportWithErrorsDTO>)ViewBag.PreviewData).Any(r => r.Errors.Any());

                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Dòng</th>
                            <th>Tên</th>
                            <th>Mô tả</th>
                            <th>Đơn vị</th>
                            <th>Có sẵn</th>
                            <th>Giá</th>
                            <th>Giá gốc</th>
                            <th>Loại hàng</th>
                            <th>Ảnh</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in (List<ProductImportWithErrorsDTO>)ViewBag.PreviewData)
                        {
                            <tr>
                                <td>@item.RowNumber</td>
                                <td class="@(item.Errors.ContainsKey("Name") ? "text-danger" : "")">
                                    @(item.Product.Name ?? "N/A")
                                    @if (item.Errors.ContainsKey("Name"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["Name"]</small>
                                    }
                                </td>
                                <td>
                                    @(item.Product.Description ?? "N/A")
                                </td>
                                <td class="@(item.Errors.ContainsKey("Unit") ? "text-danger" : "")">
                                    @(item.Product.Unit ?? "N/A")
                                    @if (item.Errors.ContainsKey("Unit"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["Unit"]</small>
                                    }
                                </td>
                                <td class="@(item.Errors.ContainsKey("AvailableQuantity") ? "text-danger" : "")">
                                    @(item.Product.AvailableQuantity != 0 ? item.Product.AvailableQuantity.ToString() : "0")
                                    @if (item.Errors.ContainsKey("AvailableQuantity"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["AvailableQuantity"]</small>
                                    }
                                </td>
                                <td class="@(item.Errors.ContainsKey("Price") ? "text-danger" : "")">
                                    @(item.Product.Price != 0 ? item.Product.Price.ToString("N2") : "0")
                                    @if (item.Errors.ContainsKey("Price"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["Price"]</small>
                                    }
                                </td>
                                <td class="@(item.Errors.ContainsKey("CostPrice") ? "text-danger" : "")">
                                    @(item.Product.CostPrice != 0 ? item.Product.CostPrice.ToString("N2") : "0")
                                    @if (item.Errors.ContainsKey("CostPrice"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["CostPrice"]</small>
                                    }
                                </td>
                                <td class="@(item.Errors.ContainsKey("CategoryId") ? "text-danger" : "")">
                                    @(item.Product.CategoryId != 0 ? item.Product.CategoryId.ToString() : "N/A")
                                    @if (item.Errors.ContainsKey("CategoryId"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["CategoryId"]</small>
                                    }
                                </td>
                                <td class="@(item.Errors.ContainsKey("ImagePath") ? "text-danger" : "")">
                                    @if (!string.IsNullOrEmpty(item.Product.ImagePath) && Uri.IsWellFormedUriString(item.Product.ImagePath, UriKind.Absolute))
                                    {
                                        <img src="@item.Product.ImagePath" alt="@item.Product.Name" class="product-image" loading="lazy">
                                    }
                                    else
                                    {
                                        <img src="/images/no-image.png" alt="No image" class="product-image">
                                    }
                                    @if (item.Errors.ContainsKey("ImagePath"))
                                    {
                                        <br />

                                        <small class="text-danger">@item.Errors["ImagePath"]</small>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (hasErrors)
                {
                    <div class="alert alert-warning mt-3">
                        Vui lòng nhập đúng định dạng dữ liệu để có thể submit. Bạn có thể tải file mẫu để đảm bảo định dạng đúng:
                        <a href="/uploads/ImportProduct.xlsx" class="btn btn-outline-info btn-sm" download>
                            <i class="bi bi-download"></i> Tải file mẫu
                        </a>
                    </div>
                }

                <form asp-action="ConfirmImport" asp-controller="Product" method="post">
                    <input type="hidden" name="previewData" value="@Html.Raw(HttpUtility.HtmlEncode(JsonConvert.SerializeObject(((List<ProductImportWithErrorsDTO>)ViewBag.PreviewData).Select(r => r.Product).ToList())))" />
                    <div class="d-flex justify-content-between mt-3">
                        <a href="/Product" class="btn btn-secondary">Quay lại</a>
                        @if (!hasErrors)
                        {
                            <button type="submit" class="btn btn-primary">Xác nhận và gửi</button>
                        }
                    </div>
                </form>
            }
            else
            {
                <div class="alert alert-info">
                    Không có dữ liệu để hiển thị.
                </div>
                <a href="/Product" class="btn btn-secondary">Quay lại nhập file</a>
            }
        </div>
    </div>
</div>

<style>
    .container-fluid {
        margin-top: 20px;
    }

    .table {
        background-color: #fff;
    }

    .product-image {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 4px;
    }

    .text-danger {
        color: red;
    }
</style>